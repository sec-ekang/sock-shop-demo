# Stage 1: Build stage for compiling the application
FROM registry.access.redhat.com/ubi9/openjdk-11:latest as builder

# Switch to root for installation and build operations
USER 0

# Install Git and clone the source repository
RUN microdnf install -y git \
    && mkdir -p /src/ \
    && cd /src/ \
    && git clone https://github.com/microservices-demo/carts

# Build the application using Maven (separated for better layer caching)
RUN cd /src/carts && mvn clean package -DskipTests

# Drop privileges before moving to next stage
USER 1001

# Stage 2: Runtime environment setup
FROM registry.access.redhat.com/ubi9/openjdk-11-runtime:latest

# Environment variables for user configuration
ENV	SERVICE_USER=myuser \
	SERVICE_UID=10001 \
	SERVICE_GROUP=mygroup \
	SERVICE_GID=10001


# Temporarily switch to root for system setup
USER 0

# Install system dependencies and create runtime user
RUN microdnf update -y \
    && microdnf install -y nc tzdata openssl ca-certificates fontconfig glibc-langpack-en gzip tar findutils shadow-utils \
    && groupadd -r -g ${SERVICE_GID} ${SERVICE_GROUP} \
    && useradd -r -u ${SERVICE_UID} -g ${SERVICE_GROUP} -m -d /home/${SERVICE_USER} -s /sbin/nologin ${SERVICE_USER}

# Set working directory and expose application port
WORKDIR /
EXPOSE 8080

# Prepare application directory
RUN mkdir -p /opt
# Copy built artifact from builder stage
COPY --from=builder /home/default/app.jar /opt/app.jar
# Set proper ownership for application JAR
RUN	chown -R ${SERVICE_USER}:${SERVICE_GROUP} /opt/app.jar

# Add JAXB dependencies (required for JDK 11 compatibility)
RUN mkdir -p /opt/lib \
    && curl -L -o /opt/lib/jaxb-api-2.3.1.jar https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar \
    && curl -L -o /opt/lib/jaxb-runtime-3.0.1.redhat-00001.jar https://maven.repository.redhat.com/ga/org/glassfish/jaxb/jaxb-runtime/3.0.1.redhat-00001/jaxb-runtime-3.0.1.redhat-00001.jar \
    && chmod 755 /opt/lib/*.jar

# Switch to non-privileged user for security
USER ${SERVICE_USER}
# Application entrypoint with security optimizations
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/urandom", "-jar","/opt/app.jar", "--port=8080"]